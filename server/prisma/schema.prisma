// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id            String   @id @default(uuid())
    firstname     String?
    lastname      String?
    batch         Int?
    contact       String?
    job           String?
    address       String?
    username      String?   @unique
    password      String?
    image         String?   @db.Text
    isApproved    Boolean   @default(false)
    isDeleted     Boolean   @default(false)
    role          UserRole
    posts         Post[]
    comment       Comment[]
    postReaction    PostReaction[]

    eventRegistration EventRegistration[]
}

enum UserRole {
    ADMIN
    USER
}

model Post {
    id              Int      @id @default(autoincrement())
    title           String?
    description     String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    createdBy       User   @relation(fields: [createdById], references: [id])
    createdById     String
    isDeleted       Boolean @default(false)
    postType        PostType?
    comment         Comment[]
    postReaction    PostReaction[]
    eventRegistration EventRegistration[]
}

enum PostType {
    EVENT
    JOB
    NEWS
}

model EventRegistration {
    id              Int      @id @default(autoincrement())
    event           Post    @relation(fields: [eventId], references: [id])
    eventId         Int
    user            User     @relation(fields: [userId], references: [id])
    userId          String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Comment {
    id              Int      @id @default(autoincrement())
    comment         String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user            User     @relation(fields: [userId], references: [id])
    userId          String
    post            Post     @relation(fields: [postId], references: [id])
    postId          Int
}

model PostReaction {
    id              Int      @id @default(autoincrement())
    type            ReactionType
    user            User     @relation(fields: [userId], references: [id])
    userId          String
    post            Post     @relation(fields: [postId], references: [id])
    postId          Int
}

enum ReactionType {
    LIKE
    LOVE
}
